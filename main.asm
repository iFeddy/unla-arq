		#INCLUDE<P16F628.INC>
		__CONFIG 3F10
		
;DECLARACION DE ESPACIOS DE MEMORIA A USAR		
		CBLOCK	0X20
		D1									;VARIABLE CON EL VALOR DEL DISPLAY 1
		D2									;VARIABLE CON EL VALOR DEL DISPLAY 2
		D3									;VARIABLE CON EL VALOR DEL DISPLAY 3
		D4									;VARIABLE CON EL VALOR DEL DISPLAY 4
		INPUT_1								;PRIMER INPUT (0x0000 A 0x0FFF)
		INPUT_2								;SEGUNDO INPUT (0x0000 A 0x0FFF)
		RESULTADO							;RESULTADO (0x0000 A 0x0FFF)
		AUX_W
		AUX_STATUS
		CONT_AR	
		CONT_AR_2
		ENDC		

;DECLARACION DE CONSTATNES
#DEFINE BTN_G1 	PORTA,6
#DEFINE BTN_G2 	PORTA,7
#DEFINE BTN_R 	PORTA,4
#DEFINE BTN_M 	PORTB,0

#DEFINE PIN_D1 	3
#DEFINE PIN_D2 	2
#DEFINE PIN_D3 	1
#DEFINE PIN_D4 	0

#DEFINE	CTRL_DISPLAY	PORTA
#DEFINE	APAGAR_DISPLAYS CLRF	PORTA

;DECLARACION DE MACROS

MOSTRAR	MACRO	DIGITO,PIN
		APAGAR_DISPLAYS
		MOVF	DIGITO,W
		CALL	TAB_DISPLAY
		MOVWF	PORTB
		BSF		CTRL_DISPLAY,PIN
		ENDM

SUMAR	MACRO	DIGITO
		INCF	DIGITO,1
		MOVF	DIGITO,W
		XORLW	.16					; LIMITE DE DIGITO -1
		BTFSC	STATUS,Z			; SI LLEGO AL LIMITE Z = 0
		CLRF	DIGITO				; LO PONE EN 0 PORQUE Z = 0
		BTFSC	STATUS,Z
		CALL	LOOP_DISPLAY
		ENDM						

;INICIO DEL PROGRAMA
		
		ORG		0X00
		GOTO	CONFI
		ORG		0X04		

;RUTINA DE INTERRUPCION
;DESBORDA EL TIMER CADA 15ms
;MUESTRA TODOS LOS DIGITOS DE ACUERDO A LAS VARIABLES D1:4

;GUARDA STATUS Y W EN VARIABLES AUXILIARES
		BCF		INTCON,T0IF
		BCF		INTCON,GIE		
		MOVWF	AUX_W
		MOVLW	STATUS
		MOVWF	AUX_STATUS
;MULTIPLEXADO DE DISPLAYS
		BTFSC	CTRL_DISPLAY,PIN_D1
		GOTO	MOSTRAR_D2			
		BTFSC	CTRL_DISPLAY,PIN_D2
		GOTO	MOSTRAR_D3
		BTFSC	CTRL_DISPLAY,PIN_D3
		GOTO	MOSTRAR_D4
		
		MOSTRAR	D1,PIN_D1
		GOTO 	FIN_T0I

MOSTRAR_D2
		MOSTRAR D2,PIN_D2
		GOTO 	FIN_T0I

MOSTRAR_D3
		MOSTRAR D3,PIN_D3
		GOTO 	FIN_T0I

MOSTRAR_D4
		MOSTRAR	D4,PIN_D4
		
FIN_T0I
;REINICIA TIMER Y RECUPERA STATUS Y W
		MOVLW	.198
		MOVWF	TMR0
		MOVF	AUX_STATUS,W
		MOVWF	STATUS
		MOVF	AUX_W,W
		RETFIE

;CONFIGURACION
		
CONFI
		MOVLW	0X07
		MOVWF	CMCON; CMCON SE TIENE QUE ESTABLECER EN 7 PARA USAR TODO EL PORTA
		MOVLW	.198
		MOVWF	TMR0
		BSF		STATUS,RP0
		MOVLW	b'00000001'
		MOVWF	TRISB	
		MOVLW	b'11110000'
		MOVWF	TRISA
		BCF		OPTION_REG,T0CS
		BCF		OPTION_REG,PSA
		BSF		OPTION_REG,PS0
		BSF		OPTION_REG,PS1
		BSF		OPTION_REG,PS2
		BSF		INTCON,GIE
		BSF		INTCON,T0IE
		BCF		STATUS,RP0

;RUTINA PRINCIPAL
;INCREMENTA DE 0 A 9 CADA DIGITO DEPENDIENDO QUE BOTON SE TOCA. 

		CLRF	PORTA
		CLRF	PORTB
		CLRF	D1
		CLRF	D2
		CLRF	D3
		CLRF	D4
BOTONES
		BTFSC	BTN_G1			;BOTON G1 = INCREMENTA
		CALL	DEMORA_AR
		BTFSC	BTN_G1			
		SUMAR	D3				;TIENE QUE SUMAR DE 000 A FFF (D3 Y D4 ESTAN INVERTIDOS EN EL SIMULADOR)
		
		BTFSC	BTN_G2			;BOTON G2 = RESTA
		CALL	DEMORA_AR
		BTFSC	BTN_G2
		CALL	LOOP_RESTAR		;VERFICA LOS DISPLAY Y LE RESTA DE A 1

		BTFSC	BTN_R
		CALL	DEMORA_AR
		BTFSC	BTN_R
		CALL	REINICIAR

		BTFSC	BTN_M
		CALL	DEMORA_AR
		BTFSC	BTN_M
		CALL	SETVARIABLE

		GOTO 	BOTONES

SETVARIABLE
		;SI INPUT_1 NO ESTA VACIO GUARDAR EN INPUT_2 Y MOSTRAR RESULTADO
		;SINO GUARDAR VARIABLE EN INPUT_1 Y VOLVER A INGRESAR NUMERO
		;MOVER D2 D3 D4 A LOS ULTIMOS BITS DE INPUT
		;HACER LA RESTA Y DESPUES PONER LOS ULTIMOS BITS DEL RESULTADO EN LAS VAR DE D2 D3 D4
		;SI ES NEGATIVO D2 TIENE QUE TENER UN VALOR DE 16 (-)
		RETURN

REINICIAR
		CALL	LIMPIAR_DISPLAY	;LIMPIA DISPLAY Y DEJA LAS VARIABLES EN 0
		CLRF	INPUT_1
		CLRF	INPUT_2
		CLRF	RESULTADO
		RETURN

LOOP_RESTAR
		MOVF	D3,0			;SI D3 ES 00 NO HACER NADA SINO RESTAR
		DECF	D3,1			;SI LLEGA A 0 LA PROXIMA VOLVER A F SI D4 ES MAYOR A 0
		RETURN

LOOP_DISPLAY
		MOVF	D3,0			;D3 (VER SI NO ESTAN MEZCLADOS EN EL REAL) 
		SUBLW	.16
		BTFSS	STATUS,W		;W = 0
		RETURN
		INCF	D4				; SI ES 16 EMPEZAR A SUMARLE AL TERCER DISPLAY
		MOVF	D4,W
		XORLW	.16				; LIMITE DE DIGITO -1
		BTFSC	STATUS,Z		; SI LLEGO AL LIMITE Z = 1
		CLRF	D4				; LO PONE EN 0 PORQUE Z = 1
		BTFSC	STATUS,Z			
		MOVF	D4,0			;D4 (VER) SI ES 0 SUMARLE UNO A D2
		SUBLW	.16
		BTFSS	STATUS,W
		RETURN
		INCF	D2
		MOVF	D2,W
		XORLW	.16
		BTFSC	STATUS,Z
		CALL	LIMPIAR_DISPLAY	;LLEGO A 0X0FFF
		RETURN

LIMPIAR_DISPLAY
		CLRF	D4
		CLRF	D3
		CLRF	D2
		CLRF	D1
		RETURN
DEMORA_AR
		MOVLW	.255
		MOVWF	CONT_AR
LOOP_AR
		MOVLW	.255
		MOVWF	CONT_AR_2
LOOP_AR_2
		DECFSZ	CONT_AR_2,1
		GOTO	LOOP_AR_2
		DECFSZ	CONT_AR,1
		GOTO	LOOP_AR
		RETURN
			
;CONVERSOR A DISPLAY
;RB1->SEG A
;RB2->SEG B 
;RB3->SEG C
;RB4->SEG D
;RB5->SEG E 
;RB6->SEG F
;RB7->SEG G

TAB_DISPLAY
		ADDWF	PCL,1
		;         GFEDCBA-
		RETLW	b'01111111'			;0
		RETLW	b'00001101'			;1
		RETLW	b'10110111'			;2
		RETLW	b'10011111'			;3
		RETLW	b'11001101'			;4
		RETLW	b'11011011'			;5
		RETLW	b'11111011'			;6
		RETLW	b'00001111'			;7
		RETLW	b'11111111'			;8
		RETLW	b'11001111'			;9
		RETLW	b'11101111'			;A
		RETLW	b'11111001'			;B
		RETLW	b'01110011'			;C
		RETLW	b'10111101'			;D
		RETLW	b'11110011'			;E
		RETLW	b'11100011'			;F
		RETLW	b'10000001'			;-		
		END